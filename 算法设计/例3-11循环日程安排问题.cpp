#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
using namespace std;
//【问题描述】设有n = 2k个选手要进行网球循环赛，要求设计一个满足以下要求的比赛日程表：
//（1）每个选手必须与其他n - 1个选手各赛一次。
//（2）每个选手一天只能赛一次。
//（3）循环赛在n - 1天之内结束。
//【问题求解】按问题要求可将比赛日程表设计成一个n行n - 1列的二维表，其中第i行、第j列表示和第i个选手在第j天比赛的选手。
//假设n位选手被顺序编号为1、2、…、n（2k）。
//通过找规律可以发现（ppt chap3 90页）：
//将n = 2k问题划分为4部分：
//（1）左上角：左上角为2k - 1个选手在前半程的比赛日程（k = 1时直接给出，否则，上一轮求出的就是2k - 1个选手的比赛日程）。
//（2）左下角：左下角为另2k - 1个选手在前半程的比赛日程，由左上角加2k - 1得到，
//（3）右上角：将左下角直接复制到右上角得到另2k - 1个选手在后半程的比赛日程。
//（4）右下角：将左上角直接复制到右下角得到2k - 1个选手在后半程的比赛日程。


static int a[1024][1024]; 
void Plan(int k)
{
	int i, j, n, t, temp;
	n = 2;				//n从2^1=2开始
	a[1][1] = 1; a[1][2] = 2;   	//求解2个选手比赛日程,得到左上角元素
	a[2][1] = 2; a[2][2] = 1;
	for (t = 1; t < k; t++)		//迭代处理2^2(t=1)…,2^k(t=k-1)个选手
	{
		temp = n;				//temp=2^t
		n = n * 2; 				//n=2^(t+1)
		for (i = temp + 1; i <= n; i++)		//填左下角元素
			for (j = 1; j <= temp; j++)
				a[i][j] = a[i - temp][j] + temp; 	//产生左下角元素
		for (i = 1; i <= temp; i++)		//填右上角元素
			for (j = temp + 1; j <= n; j++)
				a[i][j] = a[i + temp][(j + temp) % n];
		for (i = temp + 1; i <= n; i++)	//填右下角元素
			for (j = temp + 1; j <= n; j++)
				a[i][j] = a[i - temp][j - temp];
	}
}
